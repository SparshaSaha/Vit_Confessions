export interface TokenOptions {
    keyFile?: string;
    key?: string | undefined;
    email?: string | undefined;
    iss?: string;
    sub?: string;
    scope?: string | string[];
}
export declare class GoogleToken {
    token: string | null;
    expiresAt: number | null;
    key: string | undefined;
    keyFile: string | undefined;
    iss: string | undefined;
    sub: string;
    scope: string | undefined;
    rawToken: string | null;
    tokenExpires: number | null;
    email: string;
    /**
     * Create a GoogleToken.
     *
     * @param options  Configuration object.
     */
    constructor(options?: TokenOptions);
    /**
     * Returns whether the token has expired.
     *
     * @return true if the token has expired, false otherwise.
     */
    hasExpired(): boolean;
    /**
     * Returns a cached token or retrieves a new one from Google.
     *
     * @param callback The callback function.
     */
    getToken(): Promise<string | null>;
    getToken(callback: (err: Error | null, token?: string | null) => void): void;
    private getTokenAsync();
    private ensureEmail();
    /**
     * Revoke the token if one is set.
     *
     * @param callback The callback function.
     */
    revokeToken(): Promise<void>;
    revokeToken(callback: (err?: Error) => void): void;
    private revokeTokenAsync();
    /**
     * Configure the GoogleToken for re-use.
     * @param  {object} options Configuration object.
     */
    private configure(options?);
    /**
     * Request the token from Google.
     *
     * @param  {Function} callback The callback function.
     */
    private requestToken();
}
